// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// tableRcpp
IntegerVector tableRcpp(SEXP x);
RcppExport SEXP _CKutils_tableRcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tableRcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// counts
IntegerVector counts(SEXP x);
RcppExport SEXP _CKutils_counts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(counts(x));
    return rcpp_result_gen;
END_RCPP
}
// fdBCPEo
NumericVector fdBCPEo(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& log_);
RcppExport SEXP _CKutils_fdBCPEo(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP log_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    rcpp_result_gen = Rcpp::wrap(fdBCPEo(x, mu, sigma, nu, tau, log_));
    return rcpp_result_gen;
END_RCPP
}
// fpBCPEo
NumericVector fpBCPEo(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fpBCPEo(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fpBCPEo(q, mu, sigma, nu, tau, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqBCPEo
NumericVector fqBCPEo(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqBCPEo(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqBCPEo(p, mu, sigma, nu, tau, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fdBCT
NumericVector fdBCT(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& log_);
RcppExport SEXP _CKutils_fdBCT(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP log_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    rcpp_result_gen = Rcpp::wrap(fdBCT(x, mu, sigma, nu, tau, log_));
    return rcpp_result_gen;
END_RCPP
}
// fpBCT
NumericVector fpBCT(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fpBCT(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fpBCT(q, mu, sigma, nu, tau, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqBCT
NumericVector fqBCT(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqBCT(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqBCT(p, mu, sigma, nu, tau, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fdBNB
NumericVector fdBNB(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& log);
RcppExport SEXP _CKutils_fdBNB(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(fdBNB(x, mu, sigma, nu, log));
    return rcpp_result_gen;
END_RCPP
}
// fpBNB
NumericVector fpBNB(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fpBNB(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fpBNB(q, mu, sigma, nu, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqBNB
NumericVector fqBNB(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqBNB(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqBNB(p, mu, sigma, nu, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqZIBNB
NumericVector fqZIBNB(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqZIBNB(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqZIBNB(p, mu, sigma, nu, tau, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqZABNB
NumericVector fqZABNB(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqZABNB(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqZABNB(p, mu, sigma, nu, tau, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fdDEL
NumericVector fdDEL(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& log_);
RcppExport SEXP _CKutils_fdDEL(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP log_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    rcpp_result_gen = Rcpp::wrap(fdDEL(x, mu, sigma, nu, log_));
    return rcpp_result_gen;
END_RCPP
}
// fpDEL
NumericVector fpDEL(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fpDEL(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fpDEL(q, mu, sigma, nu, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqDEL
NumericVector fqDEL(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqDEL(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqDEL(p, mu, sigma, nu, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fget_C
NumericVector fget_C(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma);
RcppExport SEXP _CKutils_fget_C(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(fget_C(x, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// fdDPO
NumericVector fdDPO(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma, const bool& log_);
RcppExport SEXP _CKutils_fdDPO(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP log_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    rcpp_result_gen = Rcpp::wrap(fdDPO(x, mu, sigma, log_));
    return rcpp_result_gen;
END_RCPP
}
// fpDPO
NumericVector fpDPO(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fpDPO(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fpDPO(q, mu, sigma, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqDPO
NumericVector fqDPO(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const bool& lower_tail, const bool& log_p, const int& max_value);
RcppExport SEXP _CKutils_fqDPO(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP max_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_value(max_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(fqDPO(p, mu, sigma, lower_tail, log_p, max_value));
    return rcpp_result_gen;
END_RCPP
}
// fdMN4
NumericVector fdMN4(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& log_);
RcppExport SEXP _CKutils_fdMN4(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP log_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    rcpp_result_gen = Rcpp::wrap(fdMN4(x, mu, sigma, nu, log_));
    return rcpp_result_gen;
END_RCPP
}
// fpMN4
NumericVector fpMN4(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fpMN4(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fpMN4(q, mu, sigma, nu, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqMN4
IntegerVector fqMN4(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqMN4(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqMN4(p, mu, sigma, nu, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// frMN4
IntegerVector frMN4(const int& n, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu);
RcppExport SEXP _CKutils_frMN4(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(frMN4(n, mu, sigma, nu));
    return rcpp_result_gen;
END_RCPP
}
// fdNBI
NumericVector fdNBI(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const bool& log_p);
RcppExport SEXP _CKutils_fdNBI(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fdNBI(x, mu, sigma, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fpNBI
NumericVector fpNBI(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fpNBI(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fpNBI(q, mu, sigma, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqNBI
IntegerVector fqNBI(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqNBI(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqNBI(p, mu, sigma, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// frNBI
IntegerVector frNBI(const int& n, const NumericVector& mu, const NumericVector& sigma);
RcppExport SEXP _CKutils_frNBI(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(frNBI(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// fdSICHEL
NumericVector fdSICHEL(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& log_p);
RcppExport SEXP _CKutils_fdSICHEL(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fdSICHEL(x, mu, sigma, nu, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fpSICHEL
NumericVector fpSICHEL(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fpSICHEL(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fpSICHEL(q, mu, sigma, nu, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqSICHEL
IntegerVector fqSICHEL(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqSICHEL(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqSICHEL(p, mu, sigma, nu, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqZISICHEL
IntegerVector fqZISICHEL(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqZISICHEL(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqZISICHEL(p, mu, sigma, nu, tau, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fpZISICHEL
NumericVector fpZISICHEL(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fpZISICHEL(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fpZISICHEL(q, mu, sigma, nu, tau, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fdZANBI
NumericVector fdZANBI(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& log);
RcppExport SEXP _CKutils_fdZANBI(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(fdZANBI(x, mu, sigma, nu, log));
    return rcpp_result_gen;
END_RCPP
}
// fpZANBI
NumericVector fpZANBI(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fpZANBI(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fpZANBI(q, mu, sigma, nu, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqZANBI
IntegerVector fqZANBI(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqZANBI(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqZANBI(p, mu, sigma, nu, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// frZANBI
IntegerVector frZANBI(const int& n, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu);
RcppExport SEXP _CKutils_frZANBI(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(frZANBI(n, mu, sigma, nu));
    return rcpp_result_gen;
END_RCPP
}
// fdZINBI
NumericVector fdZINBI(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& log);
RcppExport SEXP _CKutils_fdZINBI(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(fdZINBI(x, mu, sigma, nu, log));
    return rcpp_result_gen;
END_RCPP
}
// fpZINBI
NumericVector fpZINBI(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fpZINBI(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fpZINBI(q, mu, sigma, nu, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqZINBI
IntegerVector fqZINBI(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqZINBI(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqZINBI(p, mu, sigma, nu, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// frZINBI
IntegerVector frZINBI(const int& n, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu);
RcppExport SEXP _CKutils_frZINBI(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(frZINBI(n, mu, sigma, nu));
    return rcpp_result_gen;
END_RCPP
}
// fct_to_int_cpp
IntegerVector fct_to_int_cpp(SEXP x, bool inplace);
RcppExport SEXP _CKutils_fct_to_int_cpp(SEXP xSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fct_to_int_cpp(x, inplace));
    return rcpp_result_gen;
END_RCPP
}
// starts_from_1_cpp
IntegerVector starts_from_1_cpp(DataFrame tbl, CharacterVector on, int i, List min_lookup, List cardinality);
RcppExport SEXP _CKutils_starts_from_1_cpp(SEXP tblSEXP, SEXP onSEXP, SEXP iSEXP, SEXP min_lookupSEXP, SEXP cardinalitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tbl(tblSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type on(onSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< List >::type min_lookup(min_lookupSEXP);
    Rcpp::traits::input_parameter< List >::type cardinality(cardinalitySEXP);
    rcpp_result_gen = Rcpp::wrap(starts_from_1_cpp(tbl, on, i, min_lookup, cardinality));
    return rcpp_result_gen;
END_RCPP
}
// dtsubset
SEXP dtsubset(SEXP x, SEXP rows, SEXP cols);
RcppExport SEXP _CKutils_dtsubset(SEXP xSEXP, SEXP rowsSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(dtsubset(x, rows, cols));
    return rcpp_result_gen;
END_RCPP
}
// fquantile
NumericVector fquantile(NumericVector x, NumericVector probs, bool na_rm);
RcppExport SEXP _CKutils_fquantile(SEXP xSEXP, SEXP probsSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fquantile(x, probs, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fquantile_byid
List fquantile_byid(NumericVector x, NumericVector q, StringVector id, bool rounding, bool na_rm);
RcppExport SEXP _CKutils_fquantile_byid(SEXP xSEXP, SEXP qSEXP, SEXP idSEXP, SEXP roundingSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< StringVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< bool >::type rounding(roundingSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fquantile_byid(x, q, id, rounding, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// count_if
int count_if(LogicalVector x, bool na_rm);
RcppExport SEXP _CKutils_count_if(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(count_if(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// prop_if
double prop_if(LogicalVector x, bool na_rm);
RcppExport SEXP _CKutils_prop_if(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(prop_if(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fclamp
NumericVector fclamp(NumericVector& x, NumericVector a, NumericVector b, const bool& inplace);
RcppExport SEXP _CKutils_fclamp(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< const bool& >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fclamp(x, a, b, inplace));
    return rcpp_result_gen;
END_RCPP
}
// fclamp_int
IntegerVector fclamp_int(IntegerVector& x, int a, int b, const bool& inplace);
RcppExport SEXP _CKutils_fclamp_int(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< const bool& >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fclamp_int(x, a, b, inplace));
    return rcpp_result_gen;
END_RCPP
}
// fequal
LogicalVector fequal(const NumericVector& x, const double& tol);
RcppExport SEXP _CKutils_fequal(SEXP xSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fequal(x, tol));
    return rcpp_result_gen;
END_RCPP
}
// fnormalise
NumericVector fnormalise(const NumericVector& x);
RcppExport SEXP _CKutils_fnormalise(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fnormalise(x));
    return rcpp_result_gen;
END_RCPP
}
// lin_interpolation
NumericVector lin_interpolation(const NumericVector& xp, const NumericVector& x0, const NumericVector& x1, const NumericVector& y0, const NumericVector& y1);
RcppExport SEXP _CKutils_lin_interpolation(SEXP xpSEXP, SEXP x0SEXP, SEXP x1SEXP, SEXP y0SEXP, SEXP y1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    rcpp_result_gen = Rcpp::wrap(lin_interpolation(xp, x0, x1, y0, y1));
    return rcpp_result_gen;
END_RCPP
}
// carry_forward
IntegerVector carry_forward(IntegerVector& x, const LogicalVector& pid_mrk, const int& y, const bool& byref);
RcppExport SEXP _CKutils_carry_forward(SEXP xSEXP, SEXP pid_mrkSEXP, SEXP ySEXP, SEXP byrefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid_mrk(pid_mrkSEXP);
    Rcpp::traits::input_parameter< const int& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool& >::type byref(byrefSEXP);
    rcpp_result_gen = Rcpp::wrap(carry_forward(x, pid_mrk, y, byref));
    return rcpp_result_gen;
END_RCPP
}
// carry_forward_incr
IntegerVector carry_forward_incr(IntegerVector& x, const LogicalVector& pid_mrk, const bool& recur, const int& y, const bool& byref);
RcppExport SEXP _CKutils_carry_forward_incr(SEXP xSEXP, SEXP pid_mrkSEXP, SEXP recurSEXP, SEXP ySEXP, SEXP byrefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid_mrk(pid_mrkSEXP);
    Rcpp::traits::input_parameter< const bool& >::type recur(recurSEXP);
    Rcpp::traits::input_parameter< const int& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool& >::type byref(byrefSEXP);
    rcpp_result_gen = Rcpp::wrap(carry_forward_incr(x, pid_mrk, recur, y, byref));
    return rcpp_result_gen;
END_RCPP
}
// carry_backward_decr
IntegerVector carry_backward_decr(const IntegerVector& x, const LogicalVector& pid_mrk, const int& y);
RcppExport SEXP _CKutils_carry_backward_decr(SEXP xSEXP, SEXP pid_mrkSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid_mrk(pid_mrkSEXP);
    Rcpp::traits::input_parameter< const int& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(carry_backward_decr(x, pid_mrk, y));
    return rcpp_result_gen;
END_RCPP
}
// mk_new_simulant_markers
LogicalVector mk_new_simulant_markers(const IntegerVector& pid);
RcppExport SEXP _CKutils_mk_new_simulant_markers(SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(mk_new_simulant_markers(pid));
    return rcpp_result_gen;
END_RCPP
}
// identify_longdead
LogicalVector identify_longdead(const IntegerVector& x, const LogicalVector& pid);
RcppExport SEXP _CKutils_identify_longdead(SEXP xSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_longdead(x, pid));
    return rcpp_result_gen;
END_RCPP
}
// identify_invitees
IntegerVector identify_invitees(const IntegerVector& elig, const IntegerVector& prev_inv, const NumericVector& prb, const IntegerVector& freq, const LogicalVector& pid);
RcppExport SEXP _CKutils_identify_invitees(SEXP eligSEXP, SEXP prev_invSEXP, SEXP prbSEXP, SEXP freqSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type elig(eligSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type prev_inv(prev_invSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prb(prbSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_invitees(elig, prev_inv, prb, freq, pid));
    return rcpp_result_gen;
END_RCPP
}
// hc_effect
IntegerVector hc_effect(const IntegerVector& x, const double& prb_of_continuation, const LogicalVector& pid);
RcppExport SEXP _CKutils_hc_effect(SEXP xSEXP, SEXP prb_of_continuationSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type prb_of_continuation(prb_of_continuationSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(hc_effect(x, prb_of_continuation, pid));
    return rcpp_result_gen;
END_RCPP
}
// antilogit
double antilogit(const double& x);
RcppExport SEXP _CKutils_antilogit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(antilogit(x));
    return rcpp_result_gen;
END_RCPP
}
// fscramble_trajectories
SEXP fscramble_trajectories(NumericVector& x, const LogicalVector& pid, const double& jumpiness, const bool& inplace);
RcppExport SEXP _CKutils_fscramble_trajectories(SEXP xSEXP, SEXP pidSEXP, SEXP jumpinessSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpiness(jumpinessSEXP);
    Rcpp::traits::input_parameter< const bool& >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fscramble_trajectories(x, pid, jumpiness, inplace));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidNum
NumericVector shift_bypidNum(const NumericVector& x, const int& lag, const double& replace, const IntegerVector& id);
RcppExport SEXP _CKutils_shift_bypidNum(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const double& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidNum(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidInt
IntegerVector shift_bypidInt(const IntegerVector& x, const int& lag, const int& replace, const IntegerVector& id);
RcppExport SEXP _CKutils_shift_bypidInt(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const int& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidInt(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidBool
LogicalVector shift_bypidBool(const LogicalVector& x, const int& lag, const LogicalVector& replace, const IntegerVector& id);
RcppExport SEXP _CKutils_shift_bypidBool(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidBool(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidStr
StringVector shift_bypidStr(const CharacterVector& x, const int& lag, const std::string& replace, const IntegerVector& id);
RcppExport SEXP _CKutils_shift_bypidStr(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidStr(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CKutils_tableRcpp", (DL_FUNC) &_CKutils_tableRcpp, 1},
    {"_CKutils_counts", (DL_FUNC) &_CKutils_counts, 1},
    {"_CKutils_fdBCPEo", (DL_FUNC) &_CKutils_fdBCPEo, 6},
    {"_CKutils_fpBCPEo", (DL_FUNC) &_CKutils_fpBCPEo, 7},
    {"_CKutils_fqBCPEo", (DL_FUNC) &_CKutils_fqBCPEo, 7},
    {"_CKutils_fdBCT", (DL_FUNC) &_CKutils_fdBCT, 6},
    {"_CKutils_fpBCT", (DL_FUNC) &_CKutils_fpBCT, 7},
    {"_CKutils_fqBCT", (DL_FUNC) &_CKutils_fqBCT, 7},
    {"_CKutils_fdBNB", (DL_FUNC) &_CKutils_fdBNB, 5},
    {"_CKutils_fpBNB", (DL_FUNC) &_CKutils_fpBNB, 6},
    {"_CKutils_fqBNB", (DL_FUNC) &_CKutils_fqBNB, 6},
    {"_CKutils_fqZIBNB", (DL_FUNC) &_CKutils_fqZIBNB, 7},
    {"_CKutils_fqZABNB", (DL_FUNC) &_CKutils_fqZABNB, 7},
    {"_CKutils_fdDEL", (DL_FUNC) &_CKutils_fdDEL, 5},
    {"_CKutils_fpDEL", (DL_FUNC) &_CKutils_fpDEL, 6},
    {"_CKutils_fqDEL", (DL_FUNC) &_CKutils_fqDEL, 6},
    {"_CKutils_fget_C", (DL_FUNC) &_CKutils_fget_C, 3},
    {"_CKutils_fdDPO", (DL_FUNC) &_CKutils_fdDPO, 4},
    {"_CKutils_fpDPO", (DL_FUNC) &_CKutils_fpDPO, 5},
    {"_CKutils_fqDPO", (DL_FUNC) &_CKutils_fqDPO, 6},
    {"_CKutils_fdMN4", (DL_FUNC) &_CKutils_fdMN4, 5},
    {"_CKutils_fpMN4", (DL_FUNC) &_CKutils_fpMN4, 6},
    {"_CKutils_fqMN4", (DL_FUNC) &_CKutils_fqMN4, 6},
    {"_CKutils_frMN4", (DL_FUNC) &_CKutils_frMN4, 4},
    {"_CKutils_fdNBI", (DL_FUNC) &_CKutils_fdNBI, 4},
    {"_CKutils_fpNBI", (DL_FUNC) &_CKutils_fpNBI, 5},
    {"_CKutils_fqNBI", (DL_FUNC) &_CKutils_fqNBI, 5},
    {"_CKutils_frNBI", (DL_FUNC) &_CKutils_frNBI, 3},
    {"_CKutils_fdSICHEL", (DL_FUNC) &_CKutils_fdSICHEL, 5},
    {"_CKutils_fpSICHEL", (DL_FUNC) &_CKutils_fpSICHEL, 6},
    {"_CKutils_fqSICHEL", (DL_FUNC) &_CKutils_fqSICHEL, 6},
    {"_CKutils_fqZISICHEL", (DL_FUNC) &_CKutils_fqZISICHEL, 7},
    {"_CKutils_fpZISICHEL", (DL_FUNC) &_CKutils_fpZISICHEL, 7},
    {"_CKutils_fdZANBI", (DL_FUNC) &_CKutils_fdZANBI, 5},
    {"_CKutils_fpZANBI", (DL_FUNC) &_CKutils_fpZANBI, 6},
    {"_CKutils_fqZANBI", (DL_FUNC) &_CKutils_fqZANBI, 6},
    {"_CKutils_frZANBI", (DL_FUNC) &_CKutils_frZANBI, 4},
    {"_CKutils_fdZINBI", (DL_FUNC) &_CKutils_fdZINBI, 5},
    {"_CKutils_fpZINBI", (DL_FUNC) &_CKutils_fpZINBI, 6},
    {"_CKutils_fqZINBI", (DL_FUNC) &_CKutils_fqZINBI, 6},
    {"_CKutils_frZINBI", (DL_FUNC) &_CKutils_frZINBI, 4},
    {"_CKutils_fct_to_int_cpp", (DL_FUNC) &_CKutils_fct_to_int_cpp, 2},
    {"_CKutils_starts_from_1_cpp", (DL_FUNC) &_CKutils_starts_from_1_cpp, 5},
    {"_CKutils_dtsubset", (DL_FUNC) &_CKutils_dtsubset, 3},
    {"_CKutils_fquantile", (DL_FUNC) &_CKutils_fquantile, 3},
    {"_CKutils_fquantile_byid", (DL_FUNC) &_CKutils_fquantile_byid, 5},
    {"_CKutils_count_if", (DL_FUNC) &_CKutils_count_if, 2},
    {"_CKutils_prop_if", (DL_FUNC) &_CKutils_prop_if, 2},
    {"_CKutils_fclamp", (DL_FUNC) &_CKutils_fclamp, 4},
    {"_CKutils_fclamp_int", (DL_FUNC) &_CKutils_fclamp_int, 4},
    {"_CKutils_fequal", (DL_FUNC) &_CKutils_fequal, 2},
    {"_CKutils_fnormalise", (DL_FUNC) &_CKutils_fnormalise, 1},
    {"_CKutils_lin_interpolation", (DL_FUNC) &_CKutils_lin_interpolation, 5},
    {"_CKutils_carry_forward", (DL_FUNC) &_CKutils_carry_forward, 4},
    {"_CKutils_carry_forward_incr", (DL_FUNC) &_CKutils_carry_forward_incr, 5},
    {"_CKutils_carry_backward_decr", (DL_FUNC) &_CKutils_carry_backward_decr, 3},
    {"_CKutils_mk_new_simulant_markers", (DL_FUNC) &_CKutils_mk_new_simulant_markers, 1},
    {"_CKutils_identify_longdead", (DL_FUNC) &_CKutils_identify_longdead, 2},
    {"_CKutils_identify_invitees", (DL_FUNC) &_CKutils_identify_invitees, 5},
    {"_CKutils_hc_effect", (DL_FUNC) &_CKutils_hc_effect, 3},
    {"_CKutils_antilogit", (DL_FUNC) &_CKutils_antilogit, 1},
    {"_CKutils_fscramble_trajectories", (DL_FUNC) &_CKutils_fscramble_trajectories, 4},
    {"_CKutils_shift_bypidNum", (DL_FUNC) &_CKutils_shift_bypidNum, 4},
    {"_CKutils_shift_bypidInt", (DL_FUNC) &_CKutils_shift_bypidInt, 4},
    {"_CKutils_shift_bypidBool", (DL_FUNC) &_CKutils_shift_bypidBool, 4},
    {"_CKutils_shift_bypidStr", (DL_FUNC) &_CKutils_shift_bypidStr, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_CKutils(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

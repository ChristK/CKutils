// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// tableRcpp
IntegerVector tableRcpp(SEXP x);
RcppExport SEXP _CKutils_tableRcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tableRcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// counts
IntegerVector counts(SEXP x);
RcppExport SEXP _CKutils_counts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(counts(x));
    return rcpp_result_gen;
END_RCPP
}
// fquantile
NumericVector fquantile(NumericVector x, NumericVector probs, bool na_rm);
RcppExport SEXP _CKutils_fquantile(SEXP xSEXP, SEXP probsSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fquantile(x, probs, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// count_if
int count_if(LogicalVector x, bool na_rm);
RcppExport SEXP _CKutils_count_if(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(count_if(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// prop_if
double prop_if(LogicalVector x, bool na_rm);
RcppExport SEXP _CKutils_prop_if(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(prop_if(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CKutils_tableRcpp", (DL_FUNC) &_CKutils_tableRcpp, 1},
    {"_CKutils_counts", (DL_FUNC) &_CKutils_counts, 1},
    {"_CKutils_fquantile", (DL_FUNC) &_CKutils_fquantile, 3},
    {"_CKutils_count_if", (DL_FUNC) &_CKutils_count_if, 2},
    {"_CKutils_prop_if", (DL_FUNC) &_CKutils_prop_if, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_CKutils(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

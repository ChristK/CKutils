// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// my_dBCT
NumericVector my_dBCT(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& log_, const int& n_cpu);
RcppExport SEXP _CKutils_my_dBCT(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP log_SEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dBCT(x, mu, sigma, nu, tau, log_, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pBCT
NumericVector my_pBCT(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_pBCT(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pBCT(q, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qBCT
NumericVector my_qBCT(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_qBCT(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qBCT(p, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_dBNB
NumericVector my_dBNB(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& log, const int& n_cpu);
RcppExport SEXP _CKutils_my_dBNB(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP logSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log(logSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dBNB(x, mu, sigma, nu, log, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pBNB
NumericVector my_pBNB(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_pBNB(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pBNB(q, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qBNB
IntegerVector my_qBNB(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_qBNB(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qBNB(p, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qZIBNB
IntegerVector my_qZIBNB(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_qZIBNB(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qZIBNB(p, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qZABNB
IntegerVector my_qZABNB(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_qZABNB(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qZABNB(p, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_dDEL
NumericVector my_dDEL(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& log_, const int& n_cpu);
RcppExport SEXP _CKutils_my_dDEL(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP log_SEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dDEL(x, mu, sigma, nu, log_, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pDEL
NumericVector my_pDEL(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_pDEL(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pDEL(q, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qDEL
IntegerVector my_qDEL(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_qDEL(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qDEL(p, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_get_C
NumericVector my_get_C(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma);
RcppExport SEXP _CKutils_my_get_C(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(my_get_C(x, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// my_dDPO
NumericVector my_dDPO(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma, const bool& log_, const int& n_cpu);
RcppExport SEXP _CKutils_my_dDPO(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP log_SEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dDPO(x, mu, sigma, log_, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pDPO
NumericVector my_pDPO(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_my_pDPO(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pDPO(q, mu, sigma, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// my_qDPO
IntegerVector my_qDPO(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const bool& lower_tail, const bool& log_p, const int& max_value, const int& n_cpu);
RcppExport SEXP _CKutils_my_qDPO(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP max_valueSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_value(max_valueSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qDPO(p, mu, sigma, lower_tail, log_p, max_value, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qMN4
IntegerVector my_qMN4(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_qMN4(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qMN4(p, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_dNBI
NumericVector my_dNBI(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_dNBI(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dNBI(x, mu, sigma, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pNBI
NumericVector my_pNBI(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_pNBI(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pNBI(q, mu, sigma, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qNBI
IntegerVector my_qNBI(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_qNBI(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qNBI(p, mu, sigma, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qZANBI
IntegerVector my_qZANBI(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_qZANBI(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qZANBI(p, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pZANBI_scalar
double my_pZANBI_scalar(const int& q, const double& mu, const double& sigma, const double& nu, const bool& lower_tail, const bool& log_p, const bool& check);
RcppExport SEXP _CKutils_my_pZANBI_scalar(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const bool& >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pZANBI_scalar(q, mu, sigma, nu, lower_tail, log_p, check));
    return rcpp_result_gen;
END_RCPP
}
// my_dSICHEL
NumericVector my_dSICHEL(const IntegerVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& log_, const int& n_cpu);
RcppExport SEXP _CKutils_my_dSICHEL(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP log_SEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dSICHEL(x, mu, sigma, nu, log_, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pSICHEL
NumericVector my_pSICHEL(const IntegerVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_pSICHEL(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pSICHEL(q, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qSICHEL
IntegerVector my_qSICHEL(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_qSICHEL(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qSICHEL(p, mu, sigma, nu, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_qZISICHEL
IntegerVector my_qZISICHEL(NumericVector p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_qZISICHEL(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_qZISICHEL(p, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// my_pZISICHEL
NumericVector my_pZISICHEL(NumericVector q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p, const int& n_cpu);
RcppExport SEXP _CKutils_my_pZISICHEL(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP n_cpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_cpu(n_cpuSEXP);
    rcpp_result_gen = Rcpp::wrap(my_pZISICHEL(q, mu, sigma, nu, tau, lower_tail, log_p, n_cpu));
    return rcpp_result_gen;
END_RCPP
}
// carry_forward
IntegerVector carry_forward(IntegerVector& x, const LogicalVector& pid_mrk, const int& y, const bool& byref);
RcppExport SEXP _CKutils_carry_forward(SEXP xSEXP, SEXP pid_mrkSEXP, SEXP ySEXP, SEXP byrefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid_mrk(pid_mrkSEXP);
    Rcpp::traits::input_parameter< const int& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool& >::type byref(byrefSEXP);
    rcpp_result_gen = Rcpp::wrap(carry_forward(x, pid_mrk, y, byref));
    return rcpp_result_gen;
END_RCPP
}
// carry_forward_incr
IntegerVector carry_forward_incr(IntegerVector& x, const LogicalVector& pid_mrk, const bool& recur, const int& y, const bool& byref);
RcppExport SEXP _CKutils_carry_forward_incr(SEXP xSEXP, SEXP pid_mrkSEXP, SEXP recurSEXP, SEXP ySEXP, SEXP byrefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid_mrk(pid_mrkSEXP);
    Rcpp::traits::input_parameter< const bool& >::type recur(recurSEXP);
    Rcpp::traits::input_parameter< const int& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool& >::type byref(byrefSEXP);
    rcpp_result_gen = Rcpp::wrap(carry_forward_incr(x, pid_mrk, recur, y, byref));
    return rcpp_result_gen;
END_RCPP
}
// carry_backward
IntegerVector carry_backward(const IntegerVector& x, const LogicalVector& pid_mrk, const int& y);
RcppExport SEXP _CKutils_carry_backward(SEXP xSEXP, SEXP pid_mrkSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid_mrk(pid_mrkSEXP);
    Rcpp::traits::input_parameter< const int& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(carry_backward(x, pid_mrk, y));
    return rcpp_result_gen;
END_RCPP
}
// carry_backward_decr
IntegerVector carry_backward_decr(const IntegerVector& x, const LogicalVector& pid_mrk);
RcppExport SEXP _CKutils_carry_backward_decr(SEXP xSEXP, SEXP pid_mrkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid_mrk(pid_mrkSEXP);
    rcpp_result_gen = Rcpp::wrap(carry_backward_decr(x, pid_mrk));
    return rcpp_result_gen;
END_RCPP
}
// mk_new_simulant_markers
LogicalVector mk_new_simulant_markers(const IntegerVector& pid);
RcppExport SEXP _CKutils_mk_new_simulant_markers(SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(mk_new_simulant_markers(pid));
    return rcpp_result_gen;
END_RCPP
}
// identify_longdead
LogicalVector identify_longdead(const IntegerVector& x, const LogicalVector& pid);
RcppExport SEXP _CKutils_identify_longdead(SEXP xSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_longdead(x, pid));
    return rcpp_result_gen;
END_RCPP
}
// identify_invitees
IntegerVector identify_invitees(const IntegerVector& elig, const IntegerVector& prev_inv, const NumericVector& prb, const IntegerVector& freq, const LogicalVector& pid);
RcppExport SEXP _CKutils_identify_invitees(SEXP eligSEXP, SEXP prev_invSEXP, SEXP prbSEXP, SEXP freqSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type elig(eligSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type prev_inv(prev_invSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prb(prbSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(identify_invitees(elig, prev_inv, prb, freq, pid));
    return rcpp_result_gen;
END_RCPP
}
// hc_effect
IntegerVector hc_effect(const IntegerVector& x, const double& prb_of_continuation, const LogicalVector& pid);
RcppExport SEXP _CKutils_hc_effect(SEXP xSEXP, SEXP prb_of_continuationSEXP, SEXP pidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type prb_of_continuation(prb_of_continuationSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    rcpp_result_gen = Rcpp::wrap(hc_effect(x, prb_of_continuation, pid));
    return rcpp_result_gen;
END_RCPP
}
// fbound
NumericVector fbound(const NumericVector& x, NumericVector& a, NumericVector& b);
RcppExport SEXP _CKutils_fbound(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fbound(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// antilogit
double antilogit(const double& x);
RcppExport SEXP _CKutils_antilogit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(antilogit(x));
    return rcpp_result_gen;
END_RCPP
}
// tableRcpp
IntegerVector tableRcpp(SEXP x);
RcppExport SEXP _CKutils_tableRcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tableRcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// counts
IntegerVector counts(SEXP x);
RcppExport SEXP _CKutils_counts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(counts(x));
    return rcpp_result_gen;
END_RCPP
}
// fdBCPEo
NumericVector fdBCPEo(const NumericVector& x, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& log_);
RcppExport SEXP _CKutils_fdBCPEo(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP log_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_(log_SEXP);
    rcpp_result_gen = Rcpp::wrap(fdBCPEo(x, mu, sigma, nu, tau, log_));
    return rcpp_result_gen;
END_RCPP
}
// fpBCPEo
NumericVector fpBCPEo(const NumericVector& q, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fpBCPEo(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fpBCPEo(q, mu, sigma, nu, tau, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fqBCPEo
NumericVector fqBCPEo(const NumericVector& p, const NumericVector& mu, const NumericVector& sigma, const NumericVector& nu, const NumericVector& tau, const bool& lower_tail, const bool& log_p);
RcppExport SEXP _CKutils_fqBCPEo(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fqBCPEo(p, mu, sigma, nu, tau, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// fct_to_int_cpp
IntegerVector fct_to_int_cpp(SEXP x, bool inplace);
RcppExport SEXP _CKutils_fct_to_int_cpp(SEXP xSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fct_to_int_cpp(x, inplace));
    return rcpp_result_gen;
END_RCPP
}
// starts_from_1_cpp
IntegerVector starts_from_1_cpp(DataFrame tbl, CharacterVector on, int i, List min_lookup, List cardinality);
RcppExport SEXP _CKutils_starts_from_1_cpp(SEXP tblSEXP, SEXP onSEXP, SEXP iSEXP, SEXP min_lookupSEXP, SEXP cardinalitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tbl(tblSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type on(onSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< List >::type min_lookup(min_lookupSEXP);
    Rcpp::traits::input_parameter< List >::type cardinality(cardinalitySEXP);
    rcpp_result_gen = Rcpp::wrap(starts_from_1_cpp(tbl, on, i, min_lookup, cardinality));
    return rcpp_result_gen;
END_RCPP
}
// dtsubset
SEXP dtsubset(SEXP x, SEXP rows, SEXP cols);
RcppExport SEXP _CKutils_dtsubset(SEXP xSEXP, SEXP rowsSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(dtsubset(x, rows, cols));
    return rcpp_result_gen;
END_RCPP
}
// fquantile
NumericVector fquantile(NumericVector x, NumericVector probs, bool na_rm);
RcppExport SEXP _CKutils_fquantile(SEXP xSEXP, SEXP probsSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fquantile(x, probs, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fquantile_byid
List fquantile_byid(NumericVector x, NumericVector q, StringVector id, bool rounding, bool na_rm);
RcppExport SEXP _CKutils_fquantile_byid(SEXP xSEXP, SEXP qSEXP, SEXP idSEXP, SEXP roundingSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< StringVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< bool >::type rounding(roundingSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fquantile_byid(x, q, id, rounding, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// count_if
int count_if(LogicalVector x, bool na_rm);
RcppExport SEXP _CKutils_count_if(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(count_if(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// prop_if
double prop_if(LogicalVector x, bool na_rm);
RcppExport SEXP _CKutils_prop_if(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(prop_if(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fclamp
NumericVector fclamp(NumericVector& x, double a, double b, const bool& inplace);
RcppExport SEXP _CKutils_fclamp(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const bool& >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fclamp(x, a, b, inplace));
    return rcpp_result_gen;
END_RCPP
}
// fclamp_int
IntegerVector fclamp_int(IntegerVector& x, int a, int b, const bool& inplace);
RcppExport SEXP _CKutils_fclamp_int(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< const bool& >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fclamp_int(x, a, b, inplace));
    return rcpp_result_gen;
END_RCPP
}
// fequal
LogicalVector fequal(const NumericVector& x, const double& tol);
RcppExport SEXP _CKutils_fequal(SEXP xSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fequal(x, tol));
    return rcpp_result_gen;
END_RCPP
}
// fnormalise
NumericVector fnormalise(const NumericVector& x);
RcppExport SEXP _CKutils_fnormalise(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fnormalise(x));
    return rcpp_result_gen;
END_RCPP
}
// lin_interpolation
NumericVector lin_interpolation(const NumericVector& xp, const NumericVector& x0, const NumericVector& x1, const NumericVector& y0, const NumericVector& y1);
RcppExport SEXP _CKutils_lin_interpolation(SEXP xpSEXP, SEXP x0SEXP, SEXP x1SEXP, SEXP y0SEXP, SEXP y1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    rcpp_result_gen = Rcpp::wrap(lin_interpolation(xp, x0, x1, y0, y1));
    return rcpp_result_gen;
END_RCPP
}
// fscramble_trajectories
SEXP fscramble_trajectories(NumericVector& x, const LogicalVector& pid, const double& jumpiness, const bool& inplace);
RcppExport SEXP _CKutils_fscramble_trajectories(SEXP xSEXP, SEXP pidSEXP, SEXP jumpinessSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type pid(pidSEXP);
    Rcpp::traits::input_parameter< const double& >::type jumpiness(jumpinessSEXP);
    Rcpp::traits::input_parameter< const bool& >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fscramble_trajectories(x, pid, jumpiness, inplace));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidNum
NumericVector shift_bypidNum(const NumericVector& x, const int& lag, const double& replace, const IntegerVector& id);
RcppExport SEXP _CKutils_shift_bypidNum(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const double& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidNum(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidInt
IntegerVector shift_bypidInt(const IntegerVector& x, const int& lag, const int& replace, const IntegerVector& id);
RcppExport SEXP _CKutils_shift_bypidInt(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const int& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidInt(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidBool
LogicalVector shift_bypidBool(const LogicalVector& x, const int& lag, const LogicalVector& replace, const IntegerVector& id);
RcppExport SEXP _CKutils_shift_bypidBool(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidBool(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_bypidStr
StringVector shift_bypidStr(const CharacterVector& x, const int& lag, const std::string& replace, const IntegerVector& id);
RcppExport SEXP _CKutils_shift_bypidStr(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_bypidStr(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CKutils_my_dBCT", (DL_FUNC) &_CKutils_my_dBCT, 7},
    {"_CKutils_my_pBCT", (DL_FUNC) &_CKutils_my_pBCT, 8},
    {"_CKutils_my_qBCT", (DL_FUNC) &_CKutils_my_qBCT, 8},
    {"_CKutils_my_dBNB", (DL_FUNC) &_CKutils_my_dBNB, 6},
    {"_CKutils_my_pBNB", (DL_FUNC) &_CKutils_my_pBNB, 7},
    {"_CKutils_my_qBNB", (DL_FUNC) &_CKutils_my_qBNB, 7},
    {"_CKutils_my_qZIBNB", (DL_FUNC) &_CKutils_my_qZIBNB, 8},
    {"_CKutils_my_qZABNB", (DL_FUNC) &_CKutils_my_qZABNB, 8},
    {"_CKutils_my_dDEL", (DL_FUNC) &_CKutils_my_dDEL, 6},
    {"_CKutils_my_pDEL", (DL_FUNC) &_CKutils_my_pDEL, 7},
    {"_CKutils_my_qDEL", (DL_FUNC) &_CKutils_my_qDEL, 7},
    {"_CKutils_my_get_C", (DL_FUNC) &_CKutils_my_get_C, 3},
    {"_CKutils_my_dDPO", (DL_FUNC) &_CKutils_my_dDPO, 5},
    {"_CKutils_my_pDPO", (DL_FUNC) &_CKutils_my_pDPO, 5},
    {"_CKutils_my_qDPO", (DL_FUNC) &_CKutils_my_qDPO, 7},
    {"_CKutils_my_qMN4", (DL_FUNC) &_CKutils_my_qMN4, 7},
    {"_CKutils_my_dNBI", (DL_FUNC) &_CKutils_my_dNBI, 5},
    {"_CKutils_my_pNBI", (DL_FUNC) &_CKutils_my_pNBI, 6},
    {"_CKutils_my_qNBI", (DL_FUNC) &_CKutils_my_qNBI, 6},
    {"_CKutils_my_qZANBI", (DL_FUNC) &_CKutils_my_qZANBI, 7},
    {"_CKutils_my_pZANBI_scalar", (DL_FUNC) &_CKutils_my_pZANBI_scalar, 7},
    {"_CKutils_my_dSICHEL", (DL_FUNC) &_CKutils_my_dSICHEL, 6},
    {"_CKutils_my_pSICHEL", (DL_FUNC) &_CKutils_my_pSICHEL, 7},
    {"_CKutils_my_qSICHEL", (DL_FUNC) &_CKutils_my_qSICHEL, 7},
    {"_CKutils_my_qZISICHEL", (DL_FUNC) &_CKutils_my_qZISICHEL, 8},
    {"_CKutils_my_pZISICHEL", (DL_FUNC) &_CKutils_my_pZISICHEL, 8},
    {"_CKutils_carry_forward", (DL_FUNC) &_CKutils_carry_forward, 4},
    {"_CKutils_carry_forward_incr", (DL_FUNC) &_CKutils_carry_forward_incr, 5},
    {"_CKutils_carry_backward", (DL_FUNC) &_CKutils_carry_backward, 3},
    {"_CKutils_carry_backward_decr", (DL_FUNC) &_CKutils_carry_backward_decr, 2},
    {"_CKutils_mk_new_simulant_markers", (DL_FUNC) &_CKutils_mk_new_simulant_markers, 1},
    {"_CKutils_identify_longdead", (DL_FUNC) &_CKutils_identify_longdead, 2},
    {"_CKutils_identify_invitees", (DL_FUNC) &_CKutils_identify_invitees, 5},
    {"_CKutils_hc_effect", (DL_FUNC) &_CKutils_hc_effect, 3},
    {"_CKutils_fbound", (DL_FUNC) &_CKutils_fbound, 3},
    {"_CKutils_antilogit", (DL_FUNC) &_CKutils_antilogit, 1},
    {"_CKutils_tableRcpp", (DL_FUNC) &_CKutils_tableRcpp, 1},
    {"_CKutils_counts", (DL_FUNC) &_CKutils_counts, 1},
    {"_CKutils_fdBCPEo", (DL_FUNC) &_CKutils_fdBCPEo, 6},
    {"_CKutils_fpBCPEo", (DL_FUNC) &_CKutils_fpBCPEo, 7},
    {"_CKutils_fqBCPEo", (DL_FUNC) &_CKutils_fqBCPEo, 7},
    {"_CKutils_fct_to_int_cpp", (DL_FUNC) &_CKutils_fct_to_int_cpp, 2},
    {"_CKutils_starts_from_1_cpp", (DL_FUNC) &_CKutils_starts_from_1_cpp, 5},
    {"_CKutils_dtsubset", (DL_FUNC) &_CKutils_dtsubset, 3},
    {"_CKutils_fquantile", (DL_FUNC) &_CKutils_fquantile, 3},
    {"_CKutils_fquantile_byid", (DL_FUNC) &_CKutils_fquantile_byid, 5},
    {"_CKutils_count_if", (DL_FUNC) &_CKutils_count_if, 2},
    {"_CKutils_prop_if", (DL_FUNC) &_CKutils_prop_if, 2},
    {"_CKutils_fclamp", (DL_FUNC) &_CKutils_fclamp, 4},
    {"_CKutils_fclamp_int", (DL_FUNC) &_CKutils_fclamp_int, 4},
    {"_CKutils_fequal", (DL_FUNC) &_CKutils_fequal, 2},
    {"_CKutils_fnormalise", (DL_FUNC) &_CKutils_fnormalise, 1},
    {"_CKutils_lin_interpolation", (DL_FUNC) &_CKutils_lin_interpolation, 5},
    {"_CKutils_fscramble_trajectories", (DL_FUNC) &_CKutils_fscramble_trajectories, 4},
    {"_CKutils_shift_bypidNum", (DL_FUNC) &_CKutils_shift_bypidNum, 4},
    {"_CKutils_shift_bypidInt", (DL_FUNC) &_CKutils_shift_bypidInt, 4},
    {"_CKutils_shift_bypidBool", (DL_FUNC) &_CKutils_shift_bypidBool, 4},
    {"_CKutils_shift_bypidStr", (DL_FUNC) &_CKutils_shift_bypidStr, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_CKutils(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{fdBCT}
\alias{fdBCT}
\alias{fpBCT}
\alias{fqBCT}
\title{Box-Cox t (BCT) Distribution Functions}
\usage{
fdBCT(x, mu, sigma, nu, tau, log_ = FALSE)

fpBCT(q, mu, sigma, nu, tau, lower_tail = TRUE, log_p = FALSE)

fqBCT(p, mu, sigma, nu, tau, lower_tail = TRUE, log_p = FALSE)
}
\arguments{
\item{x, q}{vector of quantiles. Must be non-negative.}

\item{mu}{vector of location parameters. Must be positive. Note that mu is the
median of the distribution.}

\item{sigma}{vector of scale parameters. Must be positive. For moderate nu > 0
and moderate or large tau, sigma*sqrt(tau/(tau-2)) approximates the coefficient
of variation.}

\item{nu}{vector of shape parameters. Controls the skewness of the distribution.
Can be any real number.}

\item{tau}{vector of degrees of freedom parameters. Must be positive. Controls
the kurtosis of the distribution.}

\item{log_, log_p}{logical; if TRUE, probabilities p are given as log(p)}

\item{lower_tail}{logical; if TRUE (default), probabilities are P[X ≤ x],
otherwise P[X > x]}

\item{p}{vector of probabilities. Must be in (0,1).}
}
\value{
\code{fdBCT} gives the density, \code{fpBCT} gives the distribution function,
and \code{fqBCT} gives the quantile function.

Vector of probabilities corresponding to the input quantiles.

Vector of quantiles corresponding to the input probabilities.
}
\description{
Optimized implementations of density, distribution function, and quantile function
for the Box-Cox t distribution. These functions are numerically equivalent to
\code{gamlss.dist::dBCT}, \code{gamlss.dist::pBCT}, and \code{gamlss.dist::qBCT}
but with improved performance through SIMD optimization and defensive programming.

Optimized implementation of the cumulative distribution function for the
Box-Cox t distribution. Numerically equivalent to \code{gamlss.dist::pBCT}
but with improved performance.

Optimized implementation of the quantile function for the Box-Cox t distribution.
Numerically equivalent to \code{gamlss.dist::qBCT} but with significantly
improved performance (typically 2x faster).
}
\details{
The Box-Cox t distribution is a four-parameter continuous distribution that
extends the Box-Cox normal distribution by replacing the normal kernel with
a t-distribution kernel. This provides additional flexibility for modeling
heavy-tailed data.

The probability density function is given by:
\deqn{f(y|\mu,\sigma,\nu,\tau) = \frac{1}{y\sigma} \cdot \frac{\Gamma((\tau+1)/2)}{\Gamma(1/2)\Gamma(\tau/2)\tau^{1/2}} \cdot \left(1+\frac{z^2}{\tau}\right)^{-(\tau+1)/2}}

where:
\itemize{
  \item If \eqn{\nu \neq 0}: \eqn{z = \frac{(y/\mu)^\nu - 1}{\nu \sigma}}
  \item If \eqn{\nu = 0}: \eqn{z = \frac{\log(y/\mu)}{\sigma}}
}

The distribution is truncated to ensure y > 0, with appropriate normalization.

When tau is very large (> 1e6), these implementations automatically switch to
a normal approximation for improved numerical stability and performance.

Computes P[X ≤ q] for the Box-Cox t distribution. The CDF involves
normalization to account for the y > 0 truncation of the distribution.

For computational efficiency, this implementation uses:
\itemize{
  \item Vectorized t-distribution CDF calculations
  \item Efficient parameter transformation and caching
  \item Robust handling of boundary cases
}

Computes the inverse cumulative distribution function (quantiles) for the
Box-Cox t distribution. This function shows the largest performance improvement
over the gamlss.dist implementation due to optimized t-distribution quantile
calculations and efficient parameter transformations.

The quantile calculation involves:
\itemize{
  \item Probability transformation accounting for distribution truncation
  \item t-distribution quantile computation using optimized R math library calls
  \item Inverse Box-Cox transformation to original scale
  \item Robust handling of boundary conditions and parameter edge cases
}

Input probabilities are automatically cloned to ensure memory safety and
prevent unexpected side effects.
}
\note{
These optimized implementations include:
\itemize{
  \item SIMD vectorization hints for modern compilers
  \item Precomputed mathematical constants
  \item Efficient input validation
  \item Robust handling of edge cases and extreme parameter values
  \item Memory-safe operations (no input mutation)
}

Performance benchmarks show 1.4x average speedup over gamlss.dist, with
quantile functions achieving up to 2x speedup.
}
\examples{
# Basic usage - single values
fdBCT(2, mu = 1, sigma = 0.5, nu = 0.3, tau = 5)
fpBCT(2, mu = 1, sigma = 0.5, nu = 0.3, tau = 5)
fqBCT(0.5, mu = 1, sigma = 0.5, nu = 0.3, tau = 5)

# Vectorized operations
x <- c(0.5, 1.0, 2.0, 3.0)
mu <- c(1.0, 1.2, 1.5, 1.8)
fdBCT(x, mu = mu, sigma = 0.5, nu = 0.3, tau = 5)

# Log densities
fdBCT(x, mu = mu, sigma = 0.5, nu = 0.3, tau = 5, log_ = TRUE)

# Upper tail probabilities
fpBCT(x, mu = mu, sigma = 0.5, nu = 0.3, tau = 5, lower_tail = FALSE)

# Different parameter combinations
# Symmetric case (nu = 0)
fdBCT(c(1, 2, 3), mu = 2, sigma = 0.3, nu = 0, tau = 4)

# Heavy-tailed case (small tau)
fdBCT(c(1, 2, 3), mu = 2, sigma = 0.3, nu = 0.5, tau = 2.1)

# Light-tailed case (large tau, approaches normal)
fdBCT(c(1, 2, 3), mu = 2, sigma = 0.3, nu = 0.5, tau = 100)

\dontrun{
# Comparison with gamlss.dist (requires gamlss.dist package)
library(gamlss.dist)
x <- c(1, 2, 3)
mu <- 2
sigma <- 0.5
nu <- 0.3
tau <- 5

# Results should be numerically identical
all.equal(fdBCT(x, mu, sigma, nu, tau), dBCT(x, mu, sigma, nu, tau))
all.equal(fpBCT(x, mu, sigma, nu, tau), pBCT(x, mu, sigma, nu, tau))
all.equal(fqBCT(c(0.2, 0.5, 0.8), mu, sigma, nu, tau),
          qBCT(c(0.2, 0.5, 0.8), mu, sigma, nu, tau))

# Performance comparison
library(microbenchmark)
microbenchmark(
  CKutils = fdBCT(x, mu, sigma, nu, tau),
  gamlss = dBCT(x, mu, sigma, nu, tau),
  times = 100
)
}

# Basic CDF evaluation
fpBCT(c(1, 2, 3), mu = 2, sigma = 0.5, nu = 0.3, tau = 5)

# Upper tail probabilities
fpBCT(c(1, 2, 3), mu = 2, sigma = 0.5, nu = 0.3, tau = 5,
      lower_tail = FALSE)

# Log probabilities
fpBCT(c(1, 2, 3), mu = 2, sigma = 0.5, nu = 0.3, tau = 5,
      log_p = TRUE)

# Basic quantile calculation
fqBCT(c(0.1, 0.5, 0.9), mu = 2, sigma = 0.5, nu = 0.3, tau = 5)

# Median (50th percentile)
fqBCT(0.5, mu = 2, sigma = 0.5, nu = 0.3, tau = 5)  # Should equal mu

# Extreme quantiles
fqBCT(c(0.001, 0.999), mu = 2, sigma = 0.5, nu = 0.3, tau = 5)

# Upper tail quantiles
fqBCT(c(0.1, 0.5, 0.9), mu = 2, sigma = 0.5, nu = 0.3, tau = 5,
      lower_tail = FALSE)

# Log probability scale
fqBCT(log(c(0.1, 0.5, 0.9)), mu = 2, sigma = 0.5, nu = 0.3, tau = 5,
      log_p = TRUE)

}
\references{
Rigby, R.A. and Stasinopoulos, D.M. (2006). Using the Box-Cox t distribution
in GAMLSS to model skewness and kurtosis. Statistical Modelling, 6(3), 200.
\doi{10.1191/1471082X06st122oa}

Rigby, R.A., Stasinopoulos, D.M., Heller, G.Z., and De Bastiani, F. (2019).
Distributions for modeling location, scale, and shape: Using GAMLSS in R.
Chapman and Hall/CRC. \doi{10.1201/9780429298547}

Stasinopoulos, D.M. and Rigby, R.A. (2007). Generalized additive models for
location scale and shape (GAMLSS) in R. Journal of Statistical Software,
23(7). \doi{10.18637/jss.v023.i07}
}
\seealso{
\code{\link{fpBCT}}, \code{\link{fqBCT}}.

For the original implementations: \code{\link[gamlss.dist]{dBCT}},
\code{\link[gamlss.dist]{pBCT}}, \code{\link[gamlss.dist]{qBCT}}.

For related distributions: \code{\link[gamlss.dist]{BCPE}},
\code{\link[gamlss.dist]{BCCG}}.
}

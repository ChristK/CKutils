% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/rng_distr.R
\name{frZANBI}
\alias{frZANBI}
\title{Zero-Altered Negative Binomial Type I Distribution Random Generation}
\usage{
frZANBI(n, mu = 1, sigma = 1, nu = 0.1)

frZANBI(n, mu = 1, sigma = 1, nu = 0.1)
}
\arguments{
\item{n}{Number of observations to generate. If length(n) > 1, the length 
is taken to be the number required.}

\item{mu}{Vector of positive mean parameters. Default is 1.}

\item{sigma}{Vector of positive dispersion parameters. Default is 1.}

\item{nu}{Vector of zero-alteration probabilities (0 < nu < 1). Default is 0.1.}
}
\value{
A numeric vector of random variates.

Vector of random deviates from the ZANBI distribution.
}
\description{
Random generation for the Zero-Altered Negative Binomial type I (ZANBI)
distribution with parameters mu (mean), sigma (dispersion), and nu (zero-alteration probability).

Generates random deviates from the Zero-Altered Negative Binomial type I 
distribution using high-quality pseudo-random number generation via the dqrng package.
}
\details{
Random variates are generated using a rejection approach: with probability \eqn{\nu}
the value is 0, and with probability \eqn{1-\nu} the value is drawn from the
standard NBI distribution truncated at zero (i.e., excluding zero).

This function generates random variates from the ZANBI distribution by:
\enumerate{
  \item Generating high-quality uniform random numbers using \code{dqrng::dqrunif}
  \item Applying the inverse CDF transformation using \code{fqZANBI}
}

The ZANBI distribution is a three-parameter discrete distribution that models 
count data where the probability at zero is altered. Unlike zero-inflation, 
zero-alteration modifies the probability mass at zero while keeping the 
remaining distribution proportional to the original.

Key characteristics:
\itemize{
  \item Support: {0, 1, 2, ...} (non-negative integers)
  \item P(X = 0) = nu
  \item P(X = k) = (1-nu) * P_NBI(k) / (1 - P_NBI(0)) for k > 0
  \item Probability at zero is directly controlled by nu
}
}
\examples{
# Generate random variates
frZANBI(10, mu=2, sigma=1, nu=0.1)

# Vector inputs with recycling
frZANBI(5, mu=c(1,2), sigma=0.5, nu=0.1)

# Generate 100 random values with default parameters
x <- frZANBI(100)
hist(x, main = "ZANBI Random Variates")

# Generate with custom parameters
x <- frZANBI(1000, mu = 5, sigma = 0.5, nu = 0.2)
summary(x)

# Compare with ZINBI and regular NBI
x_nbi <- frNBI(1000, mu = 2, sigma = 1)
x_zinbi <- frZINBI(1000, mu = 2, sigma = 1, nu = 0.3)
x_zanbi <- frZANBI(1000, mu = 2, sigma = 1, nu = 0.3)
c(mean(x_nbi == 0), mean(x_zinbi == 0), mean(x_zanbi == 0))

}
\references{
Rigby, R. A., Stasinopoulos, D. M., Heller, G. Z., and De Bastiani, F. (2019) 
Distributions for modelling location, scale, and shape: Using GAMLSS in R, 
Chapman and Hall/CRC.

Rigby, R.A., Stasinopoulos, D.M., Heller, G.Z., and De Bastiani, F. (2019). 
Distributions for modelling location, scale, and shape: Using GAMLSS in R. 
Chapman and Hall/CRC.
}
\seealso{
\code{\link{fdZANBI}}, \code{\link{fpZANBI}}, \code{\link{fqZANBI}} for 
other ZANBI distribution functions.

\code{\link{frNBI}} for the standard NBI distribution.

\code{\link{frZINBI}} for the zero-inflated version.

\code{\link[gamlss.dist]{rZANBI}} for the original implementation.

\code{\link[dqrng]{dqrunif}} for the high-quality random number generator used.
}

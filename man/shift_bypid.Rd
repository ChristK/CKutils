% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/misc_functions.R
\name{shift_bypid}
\alias{shift_bypid}
\title{Shift Values by Groups (Panel Data Lag/Lead)}
\usage{
shift_bypid(x, lag, id, replace = NA)
}
\arguments{
\item{x}{A vector to be shifted. Can be numeric (double), integer, logical, 
character, or factor.}

\item{lag}{An integer specifying the number of periods to shift. Positive 
values create lags (shift backward), negative values create leads (shift forward).}

\item{id}{An integer vector of the same length as `x` that defines the groups. 
This should be sorted to ensure proper functionality.}

\item{replace}{The value used to replace positions where no valid shifted 
value exists (e.g., first `lag` observations in each group). Defaults to `NA`. 
The type should be compatible with the type of `x`.}
}
\value{
A vector of the same type and length as `x`, with values shifted 
  according to the specified lag and group structure. Factor attributes 
  are preserved for factor inputs.
}
\description{
`shift_bypid` performs a lag or lead operation on a vector while respecting 
group boundaries defined by an ID variable. This is particularly useful for 
panel data where you want to shift values within each individual/group but 
not across different groups.
}
\details{
The function dispatches to different C++ implementations based on the type of `x`:
\itemize{
  \item For `double` vectors: uses `shift_bypidNum`
  \item For `integer` vectors (non-factor): uses `shift_bypidInt`
  \item For `factor` vectors: uses `shift_bypidInt` and preserves factor levels
  \item For `logical` vectors: uses `shift_bypidBool`
  \item For `character` vectors: uses `shift_bypidStr`
}

The algorithm works by:
1. For the first `lag` positions of each group, filling with `replace` value
2. For subsequent positions, checking if the current ID matches the ID at position `i-lag`
3. If IDs match (same group), copying the value from `x[i-lag]`
4. If IDs don't match (different group), using the `replace` value

**Important**: The `id` vector should be sorted to ensure correct behavior. 
Unsorted IDs may lead to unexpected results.
}
\examples{
library(data.table)

# Create sample panel data
dt <- data.table(
  id = rep(1:3, each = 4),
  time = rep(1:4, 3),
  value = 1:12
)

# Add lagged values (lag = 1)
dt[, value_lag1 := shift_bypid(value, lag = 1, id = id)]

# Add leading values (lag = -1)  
dt[, value_lead1 := shift_bypid(value, lag = -1, id = id)]

# Works with different data types
dt[, char_var := letters[1:12]]
dt[, char_lag1 := shift_bypid(char_var, lag = 1, id = id, replace = "missing")]

# Factor example
dt[, factor_var := factor(c("A", "B", "A", "B"), levels = c("A", "B", "C"))]
dt[, factor_lag1 := shift_bypid(factor_var, lag = 1, id = id)]

print(dt)
}

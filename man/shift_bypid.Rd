% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/misc_functions.R
\name{shift_bypid}
\alias{shift_bypid}
\alias{shift_bypidNum}
\alias{shift_bypidInt}
\alias{shift_bypidBool}
\alias{shift_bypidStr}
\title{Shift Values by ID Groups}
\usage{
shift_bypidNum(x, lag, replace, id)

shift_bypidInt(x, lag, replace, id)

shift_bypidBool(x, lag, replace, id)

shift_bypidStr(x, lag, replace, id)

shift_bypid(x, lag, id, replace = NA)
}
\arguments{
\item{x}{A vector to be shifted. Can be numeric (double), integer, logical, 
character, or factor.}

\item{lag}{An integer specifying the number of periods to shift. Positive 
values create lags (shift backward), negative values create leads (shift forward).}

\item{replace}{The value used to replace positions where no valid shifted 
value exists (e.g., first `lag` observations in each group). Defaults to `NA`. 
The type should be compatible with the type of `x`.}

\item{id}{An integer vector of the same length as `x` that defines the groups. 
This should be sorted to ensure proper functionality.}
}
\value{
Vector of the same type and length as input `x`, with values shifted 
  according to the specified lag and group structure.

Numeric vector of the same length as input, with values shifted 
  according to the specified lag and group structure.

Integer vector of the same length as input, with values shifted 
  according to the specified lag and group structure. Factor attributes 
  are preserved if present in the input.

Logical vector of the same length as input, with values shifted 
  according to the specified lag and group structure.

Character vector of the same length as input, with values shifted 
  according to the specified lag and group structure.

A vector of the same type and length as `x`, with values shifted 
  according to the specified lag and group structure. Factor attributes 
  are preserved for factor inputs.
}
\description{
High-performance implementations for shifting/lagging values within groups 
defined by ID variables. These functions are optimised for panel data and 
time series analysis where values need to be shifted within groups while 
preserving group boundaries.

Efficiently shifts numeric values within groups defined by ID variables.
Optimized for panel data and time series analysis.

Efficiently shifts integer values within groups defined by ID variables.
Preserves factor attributes when present, making it suitable for categorical data.

Efficiently shifts logical (boolean) values within groups defined by ID variables.
Designed for binary indicators and flag variables in panel data.

Efficiently shifts character (string) values within groups defined by ID variables.
Ideal for text data, labels, and categorical variables in panel data analysis.

`shift_bypid` performs a lag or lead operation on a vector while respecting 
group boundaries defined by an ID variable. This is particularly useful for 
panel data where you want to shift values within each individual/group but 
not across different groups.
}
\details{
These functions implement efficient group-aware shifting operations commonly 
needed in panel data analysis. Key features include:

\itemize{
  \item \strong{Group preservation}: Values are never shifted across different ID groups
  \item \strong{Boundary handling}: Positions at group boundaries are filled with replacement values
  \item \strong{Bidirectional shifting}: Supports both lags (positive) and leads (negative)
  \item \strong{Type preservation}: Maintains original data types and attributes (e.g., factor levels)
  \item \strong{High performance}: Optimized C++ implementation with minimal memory allocation
}

For positive lag values:
\itemize{
  \item Values are shifted forward (standard lag operation)
  \item First `lag` positions in each group are filled with replacement value
  \item `x[i]` becomes `x[i-lag]` if `id[i] == id[i-lag]`, otherwise replacement value
}

For negative lag values (leads):
\itemize{
  \item Values are shifted backward (lead operation) 
  \item Last `abs(lag)` positions in each group are filled with replacement value
  \item `x[i]` becomes `x[i+abs(lag)]` if `id[i] == id[i+abs(lag)]`, otherwise replacement value
}

This function automatically detects and preserves factor attributes including
levels and class information. This makes it particularly useful for shifting
categorical variables that have been converted to integers.

The replacement parameter must be a logical vector (even with just one element)
to maintain type consistency. This is particularly useful for shifting binary
indicators, treatment flags, or event occurrence variables in longitudinal data.

This function handles character data efficiently by converting the replacement
value to the appropriate Rcpp::String type internally. It's particularly useful
for shifting categorical variables, labels, or any text-based data in 
longitudinal datasets.

The function dispatches to different C++ implementations based on the type of `x`:
\itemize{
  \item For `double` vectors: uses `shift_bypidNum`
  \item For `integer` vectors (non-factor): uses `shift_bypidInt`
  \item For `factor` vectors: uses `shift_bypidInt` and preserves factor levels
  \item For `logical` vectors: uses `shift_bypidBool`
  \item For `character` vectors: uses `shift_bypidStr`
}

The algorithm works by:
1. For the first `lag` positions of each group, filling with `replace` value
2. For subsequent positions, checking if the current ID matches the ID at position `i-lag`
3. If IDs match (same group), copying the value from `x[i-lag]`
4. If IDs don't match (different group), using the `replace` value

**Important**: The `id` vector should be sorted to ensure correct behaviour. 
Unsorted IDs may lead to unexpected results.
}
\examples{
# Example data with two groups
id <- c(1, 1, 1, 2, 2, 2)
values <- c(10, 20, 30, 40, 50, 60)

# Lag by 1 (shift forward)
shift_bypidNum(values, lag = 1, replace = NA_real_, id = id)
# Result: [NA, 10, 20, NA, 40, 50]

# Lead by 1 (shift backward) 
shift_bypidNum(values, lag = -1, replace = NA_real_, id = id)
# Result: [20, 30, NA, 50, 60, NA]

# Integer data with factor preservation
factors <- factor(c("A", "B", "C", "A", "B", "C"))
factors_int <- as.integer(factors)
result <- shift_bypidInt(factors_int, lag = 1, replace = NA_integer_, id = id)
# Maintains factor attributes

# Logical data
logical_vals <- c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)
shift_bypidBool(logical_vals, lag = 1, replace = FALSE, id = id)

# Character data
char_vals <- c("a", "b", "c", "d", "e", "f")
shift_bypidStr(char_vals, lag = 1, replace = "missing", id = id)

library(data.table)

# Create sample panel data
dtb <- data.table(
  id = rep(1:3, each = 4),
  time = rep(1:4, 3),
  value = 1:12
)

# Add lagged values (lag = 1)
dtb[, value_lag1 := shift_bypid(value, lag = 1, id = id)]

# Add leading values (lag = -1)  
dtb[, value_lead1 := shift_bypid(value, lag = -1, id = id)]

# Works with different data types
dtb[, char_var := letters[1:12]]
dtb[, char_lag1 := shift_bypid(char_var, lag = 1, id = id, replace = "missing")]

}
\seealso{
\code{\link[data.table]{shift}} for data.table's shift function,
\code{\link[dplyr]{lag}} and \code{\link[dplyr]{lead}} for dplyr alternatives.
}

# The docker image to use for the pipeline
image: rocker/tidyverse

# The order of job execution. Jobs of the same stage are run in parallel and lead to the next stage if completed successfully
# Here generates 3 steps to the gitlab checking because 3 stages are described
stages:
  - build
  - test
  - deploy

# Describe the step to build the package/ to do before building the package
# Here the last line (the check) makes the analyze fail because a lot of warnings are present
# due to the function involving C++ functions, that are not documented. Adding the "allow_failure: true"
# allows the code to passed with these warnings, otherwise the analyze stops
building:
  stage: build
  allow_failure: true
  script:
    - R -e "remotes::install_deps(dependencies = T)"
    - R -e 'devtools::check()'

buildbinary:
  stage: build
  script:
    - Rscript -e 'devtools::build(binary = TRUE)'
# To have the converage percentge appear as a gitlab badge follow these instructions
# https://docs.gitlab.com/ee/user/project/pipelines/settings.html#test-coverage-parsing
# The coverage parsing string is
# Code coverage: \d+\.\d+

testing:
    stage: test
    allow_failure: false
    when: on_success
    only:
        - master
        
    script:
        - Rscript -e 'install.packages("devtools")'
     #, repos=file.path("file:",normalizePath("bus/mirror-packages/cran")))'
        - Rscript -e 'install.packages("remotes")'
   # script:
        - Rscript -e 'devtools::test("AmandineR/CKutils")'
   #     - Rscript -e 'cc <- covr::package_coverage; covr::gitlab(coverage = cc); cat("Code coverage:", paste0(format(covr::percent_coverage(cc), nsmall = 1),"%"))'
    artifacts:
        paths:
            - public

   # unittests:
    #   stage: test
     #  script:
      #    - Rscript -e 'if (any(as.data.frame(devtools::test())[["failed"]] > 0)) stop("Some tests failed.")'
# To produce a code coverage report as a GitLab page see
# https://about.gitlab.com/2016/11/03/publish-code-coverage-report-with-gitlab-pages/

pages:
    stage: deploy
    dependencies:
        - testing
    script:
        - mkdir .public
        - cp -r * .public
        - mv .public public
    artifacts:
        paths:
            - public
       # expire_in: 30 days
    only:
        - master
        
install:
  stage: deploy
  script:
    - r -e 'devtools::install()'        

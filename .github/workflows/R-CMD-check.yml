# =============================================================================
# R CMD Check Workflow for CKutils R Package
# =============================================================================
#
# This workflow runs comprehensive R CMD check across multiple platforms and
# R versions to ensure CRAN compliance and cross-platform compatibility.
#
# Workflow triggers:
# - Push to main/master branches
# - Pull requests to main/master branches
#
# Testing matrix covers:
# - Operating Systems: macOS (Intel + Apple Silicon), Windows, Ubuntu (multiple versions)
# - R Versions: devel, release, oldrel-1, oldrel-2 (for maximum compatibility)
# - Architectures: 32-bit and 64-bit (automatic on Windows)
#
# This comprehensive testing ensures:
# - CRAN submission readiness
# - Cross-platform compatibility
# - Backward compatibility with older R versions
# - Forward compatibility with R-devel
#
# The workflow uses r-lib/actions which provide standardized, well-maintained
# GitHub Actions specifically designed for R package development.
#
# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
# =============================================================================

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    # Comprehensive testing matrix for maximum compatibility
    # fail-fast: false ensures all configurations are tested even if some fail
    strategy:
      fail-fast: false
      matrix:
        config:
          # macOS testing (covers both Intel and Apple Silicon)
          - {os: macos-latest,   r: 'release'}    # Apple Silicon (M1/M2) - current stable
          - {os: macos-latest,   r: 'devel', http-user-agent: 'release'}     # Apple Silicon - future compatibility
          - {os: macos-latest,   r: 'oldrel-1'}   # Apple Silicon - backward compatibility
          
          # Windows testing (covers both 32-bit and 64-bit automatically)
          - {os: windows-latest, r: 'release'}    # Current stable Windows
          - {os: windows-latest, r: 'devel', http-user-agent: 'release'}     # Future Windows compatibility
          - {os: windows-latest, r: 'oldrel-1'}   # Backward Windows compatibility
          
          # Ubuntu testing (primary CRAN checking environment)
          - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}    # R-devel (future R version)
          - {os: ubuntu-latest,   r: 'release'}   # Current stable R
          - {os: ubuntu-latest,   r: 'oldrel-1'}  # Previous R version
          - {os: ubuntu-latest,   r: 'oldrel-2'}  # Two versions back
          
          # Additional compatibility testing
          - {os: ubuntu-22.04,   r: 'release'}    # Ubuntu 22.04 LTS for broader compatibility
          # - {os: macos-12,       r: 'release'}    # Intel Mac specifically (ddisabled for now due to slow execution)

    # Environment variables for authentication and debugging
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Pandoc (required for vignettes and R Markdown)
      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      # Step 3: Set up R environment with specified version and configuration
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true  # Use RStudio Package Manager for faster installs

      # Step 3.2: Install system dependencies (Ubuntu)
      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libudunits2-dev libgdal-dev libgeos-dev libproj-dev

      # Step 3.5: Install system dependencies (macOS)
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # Show system information for debugging
          echo "System info:"
          uname -a
          echo "Xcode version:"
          xcodebuild -version || echo "Xcode not found"
          echo "Clang version:"
          clang --version || echo "Clang not found"
          
          # Ensure we have the latest Xcode command line tools
          xcode-select --install 2>/dev/null || echo "Command line tools already installed"
          
          # Verify command line tools are properly installed
          xcode-select -p
          
          # Install Homebrew packages commonly needed for R packages
          # Check and install only if not already present to reduce log noise
          for pkg in pkg-config openssl curl gdal geos proj udunits; do
            if ! brew list "$pkg" &>/dev/null; then
              echo "Installing $pkg..."
              brew install "$pkg"
            else
              echo "$pkg is already installed, skipping..."
            fi
          done
          # From https://www.mail-archive.com/r-sig-mac@r-project.org/msg06927.html
          sudo Rscript -e "source('https://mac.R-project.org/bin/install.R'); install.libs('gettext')"

          # brew install gettext
          # Force link gettext to make libintl.h available
          # brew link --force gettext
          
          # Set environment variables for macOS compilation
          # Both Homebrew paths for Apple Silicon (/opt/homebrew) and Intel (/usr/local)
          # gettext_prefix=$(brew --prefix gettext)
          echo "CPPFLAGS=-I/opt/homebrew/include -I/usr/local/include -I${gettext_prefix}/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L/opt/homebrew/lib -L/usr/local/lib -L${gettext_prefix}/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${gettext_prefix}/lib/pkgconfig:/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig" >> $GITHUB_ENV
          
          # Verify gettext installation
          # ls -la "${gettext_prefix}/include/libintl.h" || echo "Warning: libintl.h not found"

      # Step 4: Install package dependencies required for checking
      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck  # Ensure rcmdcheck package is available
          needs: check                    # Install all dependencies needed for R CMD check

      # Step 5: Run comprehensive R CMD check
      - name: Run R CMD check
        uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true  # Upload test snapshots on failure for debugging

      # Step 5.1: Upload installation logs on failure for debugging
      - name: Upload 00install.out log
        if: failure()  # Only runs if a previous step failed
        uses: actions/upload-artifact@v4
        with:
          name: install-log-${{ matrix.config.os }}-${{ matrix.config.r }}
          path: check/CKutils.Rcheck/00install.out
          if-no-files-found: ignore

      # Step 5.2: Upload check logs on failure for comprehensive debugging
      - name: Upload all check logs
        if: failure()  # Only runs if a previous step failed
        uses: actions/upload-artifact@v4
        with:
          name: check-logs-${{ matrix.config.os }}-${{ matrix.config.r }}
          path: check/CKutils.Rcheck/
          if-no-files-found: ignore

      # Step 6: Show installation logs on failure (macOS debugging)
      - name: Show installation logs on failure
        if: failure() && runner.os == 'macOS'
        run: |
          echo "=== Installation logs ==="
          find . -name "00install.out" -exec echo "File: {}" \; -exec cat {} \; || echo "No install logs found"
          echo "=== Check logs ==="
          find . -name "00check.log" -exec echo "File: {}" \; -exec cat {} \; || echo "No check logs found"
